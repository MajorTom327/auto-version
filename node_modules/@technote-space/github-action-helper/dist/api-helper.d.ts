import type { Octokit, components } from './types.js';
import type { Context } from '@actions/github/lib/context.js';
import path from 'path';
type GitCreateTreeResponseData = components['schemas']['git-tree'];
type GitCreateCommitResponseData = components['schemas']['git-commit'];
type PullsListResponseData = components['schemas']['pull-request-simple'];
type PullsCreateResponseData = components['schemas']['pull-request'];
type PullsUpdateResponseData = components['schemas']['pull-request'];
type PullsUpdateParams = {
    body?: string;
    draft?: boolean;
    state?: 'open' | 'closed' | undefined;
    title?: string;
    base?: string;
};
type PullsCreateParams = PullsUpdateParams & {
    title: string;
};
type PullsInfo = {
    'html_url': string;
    'commits_url': string;
    'comments_url': string;
    id: number;
    number: number;
    isPrCreated: boolean;
};
type PullsListParams = {
    base?: string;
    direction?: 'asc' | 'desc';
    head?: string;
    sort?: 'created' | 'updated' | 'popularity' | 'long-running';
    state?: 'open' | 'closed' | 'all';
};
export default class ApiHelper {
    private readonly octokit;
    private readonly context;
    private readonly logger?;
    private readonly sender?;
    private readonly suppressBPError?;
    private readonly refForUpdate?;
    private prCache;
    constructor(octokit: Octokit, context: Context, logger?: any, options?: {
        sender?: string;
        refForUpdate?: string;
        suppressBPError?: boolean;
    });
    private getResponseData;
    private callLogger;
    private getSender;
    getRefForUpdate: (encode: boolean) => Promise<string>;
    private createBlob;
    private getCommitSha;
    private getCommit;
    private getPR;
    filesToBlobs: (rootDir: string, files: Array<string>) => Promise<Array<{
        path: string;
        sha: string;
    }>>;
    createTree: (blobs: Array<{
        path: string;
        sha: string;
    }>) => Promise<GitCreateTreeResponseData>;
    createCommit: (commitMessage: string, tree: GitCreateTreeResponseData) => Promise<GitCreateCommitResponseData>;
    private getRef;
    updateRef: (commit: GitCreateCommitResponseData, refName: string, force: boolean) => Promise<boolean>;
    createRef: (commit: GitCreateCommitResponseData, refName: string) => Promise<void>;
    deleteRef: (refName: string) => Promise<void>;
    findPullRequest: (branchName: string) => Promise<PullsListResponseData | null>;
    pullsList: (params: PullsListParams) => Promise<Array<PullsListResponseData>>;
    pullsCreate: (branchName: string, detail: PullsCreateParams) => Promise<PullsCreateResponseData>;
    pullsUpdate: (number: number, detail: PullsUpdateParams) => Promise<PullsUpdateResponseData>;
    getBranchInfo: (branch: string) => {
        branchName: string;
        headName: string;
        refName: string;
    };
    private createPulls;
    pullsCreateOrUpdate: (createBranchName: string, detail: PullsCreateParams) => Promise<PullsInfo>;
    pullsCreateOrComment: (createBranchName: string, detail: PullsCreateParams) => Promise<PullsInfo>;
    createCommentToPr: (branch: string, body: string | undefined) => Promise<boolean>;
    private isProtectedBranchError;
    private checkDiff;
    private prepareCommit;
    commit: (rootDir: string, commitMessage: string, files: Array<string>) => Promise<boolean>;
    createPR: (rootDir: string, commitMessage: string, files: Array<string>, createBranchName: string, detail: PullsCreateParams) => Promise<boolean | PullsInfo>;
    closePR: (createBranchName: string, message?: string) => Promise<void>;
    getUser: () => Promise<{
        login: string;
        email: string;
        name: string;
        id: number;
    }>;
    getDefaultBranch: () => Promise<string>;
    getTags: () => Promise<Array<string>>;
    getLastTag: () => Promise<string>;
    getNewPatchVersion: () => Promise<string>;
    getNewMinorVersion: () => Promise<string>;
    getNewMajorVersion: () => Promise<string>;
}
export {};
