"use strict";var e=require("@actions/core"),t=require("@actions/github/lib/context"),r=require("ramda"),a=require("@actions/github"),o=require("@technote-space/github-action-helper"),n=require("ramda-adjunct"),c=require("fs-extra"),s=require("@technote-space/github-action-log-helper");function i(e){var t=Object.create(null);return e&&Object.keys(e).forEach((function(r){if("default"!==r){var a=Object.getOwnPropertyDescriptor(e,r);Object.defineProperty(t,r,a.get?a:{enumerable:!0,get:function(){return e[r]}})}})),t.default=e,Object.freeze(t)}var p=i(c);class g{octokit;context;logger;constructor(t,r){const o=e.getInput("GITHUB_TOKEN");this.octokit=a.getOctokit(o,{timeZone:"Canada/Vancouver"}),this.context=t,this.logger=r}async getLatestVersion(e){const[t,a]=e.split("/");return this.octokit.rest.packages.getAllPackageVersionsForPackageOwnedByAuthenticatedUser({package_type:"npm",package_name:a}).then((e=>e)).catch((e=>this.octokit.rest.packages.getAllPackageVersionsForPackageOwnedByOrg({org:t,package_type:"npm",package_name:a}))).then((e=>r.compose(r.head,n.sortByProps(["major","minor","patch"]),r.map(r.applySpec({major:r.compose(parseInt,r.nth(0),r.split(".")),minor:r.compose(parseInt,r.nth(1),r.split(".")),patch:r.compose(parseInt,r.nth(2),r.split("."))})),r.map(r.propOr("0.0.0","name")),r.propOr([],"data"))(e)))}async commit(e){const t=new o.ApiHelper(this.octokit,this.context,this.logger,{refForUpdate:"heads/main",suppressBPError:!0});await t.commit(".",`🏷️ Update version to ${e}`,["package.json"])}}(async()=>{const e=new t.Context,a=new s.Logger,o=new g(e,a),n=r.compose(r.join("/"),r.props(["owner","repo"]))(e.repo),c=await o.getLatestVersion(n),i=r.compose(r.join("."),r.props(["major","minor","patch"]),r.evolve({patch:r.inc}))(c);p.readFile("./package.json","utf8").then((e=>r.assoc("version",i,JSON.parse(e)))).then((e=>p.writeFile("./package.json",JSON.stringify(e)))).then((()=>{}))})().catch((t=>{e.setFailed(t.message)}));
